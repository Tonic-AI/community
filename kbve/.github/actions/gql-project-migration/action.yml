name: 'GQL - Project Card Migration'
description: 'An action to manage and migrate a project card.'
branding:
  color: 'green'
  icon: 'box'
inputs:
  token:
    description: 'Your Github Organization Token'
    #required:
  org:
    description: 'Your Github Organization Name'
    default: 'KBVE'
  repo:
    description: 'Your Github Repo'
    default: 'kbve'
  project:
    description: 'Your Organization Project Number'
    default: '5'
  key:
    description: 'Your Project Field Key'
  value:
    description: 'Your Project Field Value'
  idref:
    description: 'Your Repo Issue/PR ID'

runs:
  using: 'composite'
  steps:
    - name: GQL Query Organization
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
            gh api graphql -f query='
              query($org: String!, $number: Int!) {
                organization(login: $org){
                  projectV2(number: $number) {
                    id
                    fields(first:20) {
                      nodes {
                        ... on ProjectV2Field {
                          id
                          name
                        }
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }' -f org=${{ inputs.org }} -F number=${{ inputs.project }} > project_data.json

              echo 'PROJECT_ID='$(jq '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV
              echo 'DATE_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Date") | .id' project_data.json) >> $GITHUB_ENV
              echo 'KEY_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "'${{ inputs.key }}'") | .id' project_data.json) >> $GITHUB_ENV
              echo 'VALUE_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "'${{ inputs.key }}'") | .options[] | select(.name=="'${{ inputs.value }}'") |.id' project_data.json) >> $GITHUB_ENV

    - name: Log Date
      shell: bash
      run: echo "DATE=$(date +"%Y-%m-%d")" >> $GITHUB_ENV
            
    - name: Get Edge Id
      shell: bash
      env:
          GITHUB_TOKEN: ${{ inputs.token }}
      run: |
          item_id="$( gh api graphql -f query='
            mutation($project:ID!, $content:ID!) {
              addProjectV2ItemById(input: {projectId: $project, contentId: $content}) {
                item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f content=${{ inputs.idref }} --jq '.data.addProjectV2ItemById.item.id')"

            echo 'ITEM_ID='$item_id >> $GITHUB_ENV
            
    - name: Set Key Field Value
      shell: bash
      env:
          GITHUB_TOKEN: ${{ inputs.token }}
      run: |
          gh api graphql -f query='
            mutation (
              $project: ID!
              $item: ID!
              $status_field: ID!
              $status_value: String!
              $date_field: ID!
              $date_value: Date!
            ) {
              set_status: updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $status_field
                value: {
                  singleSelectOptionId: $status_value
                  }
              }) {
                projectV2Item {
                  id
                  }
              }
              set_date_posted: updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $date_field
                value: {
                  date: $date_value
                }
              }) {
                projectV2Item {
                  id
                }
              }
            }' -f project=${{ env.PROJECT_ID}} -f item=${{ env.ITEM_ID}} -f status_field=${{ env.KEY_FIELD_ID}} -f status_value=${{ env.VALUE_FIELD_ID }} -f date_field=${{ env.DATE_FIELD_ID }} -f date_value=${{ env.DATE }} --silent